#ifndef SCENE_H
#define SCENE_H

#include "resources.h"

#include "window.h"

class Scene
{
public:
    Scene(Resources& res)
    : m_resources(res)
    {}
    virtual ~Scene() = default;
    
    virtual void run(Window& w, double dt) = 0;
    
protected:
    Resources& m_resources;

};

#endif // SCENE_H
#include "scene_attraction.h"

#include <iostream>
#include "imgui/imgui.h"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include "utils.h"

// TODO - coordonnées de texture
const GLfloat groundData[] = {
    -45.f, 0.0f, -45.f,  0.0f, 0.0f,
     45.f, 0.0f, -45.f,  0.0f, 0.0f,
    -45.f, 0.0f,  45.f,  0.0f, 0.0f,
     45.f, 0.0f,  45.f,  0.0f, 0.0f,
};

const GLubyte indexes[] = {
    2, 3, 0,
    3, 1, 0
};
//les vecteurs pour positionner les cubes, ils doivent etre a une hauteur de float 3.0
glm::vec3 cubePositions[] = {
    // glm::vec3(x, 3.0f, z) , le plan est en x,y
    glm::vec3(0.0f, 0.0f, 0.0f),
    glm::vec3(-10.0f,3.0f, 0.0f),
    glm::vec3(0.0f, 3.0f, 10.0f),
    glm::vec3(0.0f, 3.0f, -10.0f)
};


SceneAttraction::SceneAttraction(Resources& res, bool& isMouseMotionEnabled)
: Scene(res)
, m_isMouseMotionEnabled(isMouseMotionEnabled)
, m_cameraMode(0)
, m_isOrtho(false)
, m_cameraPosition(0.0f, 5.0f, 0.0f)
, m_cameraOrientation(0.0f, 0.0f)

, m_groundBuffer(GL_ARRAY_BUFFER, sizeof(groundData), groundData, GL_STATIC_DRAW)
, m_groundIndicesBuffer(GL_ELEMENT_ARRAY_BUFFER, sizeof(indexes), indexes, GL_STATIC_DRAW)
, m_groundVao()
, m_groundDraw(m_groundVao, 6)

, m_largePlatformAngle(0.0f)
, m_smallPlatformAngle{0.0f}
, m_cupsAngles{0.0f}

, m_suzanne("../models/suzanne.obj")
, m_cup("../models/cup.obj")
, m_cupPlate("../models/plate.obj")
, m_smallPlatform("../models/smallPlatform.obj")
, m_largePlatform("../models/largePlatform.obj")
, m_cube("../models/cube.obj")

, m_groundTexture("../textures/grassSeamless.jpg")
, m_suzanneTexture("../textures/suzanneTextureShade.png")
, m_cupTextureAtlas("../textures/cupTextureAtlas.png")
, m_smallPlatformTexture("../textures/smallPlatform.png")
, m_largePlatformTexture("../textures/largePlatform.png")
{
    // TODO - spécifier les attributs

    
    m_groundVao.bind();
    m_groundIndicesBuffer.bind();
    m_groundVao.specifyAttribute(m_groundBuffer, 0, 3, 5, 0); 
    m_groundVao.specifyAttribute(m_groundBuffer, 1, 2, 5, 3); 
    m_groundVao.unbind();
    
    // TODO - init des textures

}

SceneAttraction::~SceneAttraction()
{
}

void SceneAttraction::run(Window& w, double dt)
{    
    ImGui::Begin("Scene Parameters");
    ImGui::Combo("Camera mode", &m_cameraMode, CAMERA_MODE_NAMES, N_CAMERA_MODE_NAMES);
    ImGui::Checkbox("Orthographic camera?", &m_isOrtho);
    ImGui::End();
    
    updateInput(w, dt);    
    
    m_largePlatformAngle += 0.5 * dt;
    for (int i = 0; i < 3; i++)
    {
        m_smallPlatformAngle[i] += 0.5 * dt;
        for (int j = 0; j < 4; j++)
            m_cupsAngles[i][j] += (0.5 + j * 0.5f) * dt;
    }

    glm::mat4 model, proj, view, mvp;
    
    proj = getProjectionMatrix(w);
    
    if (m_cameraMode == 0 || m_cameraMode == 2)
        view = getCameraFirstPerson();
    else
        view = getCameraThirdPerson();
    
    // TODO - dessin de la scène
      // 1.matrice modele pour le sol (matrice de base identity)
      model = glm::mat4(1.0f);
      // 2.calcul de la matrice mvp , re-calcul en fonction de du deplacement de la premiere peersonne
      mvp = proj * view * model;
      
      // 3activer le shader de colorUniform(props a Tristan)
      m_resources.colorUniform.use();

      // 4.envoyer la matrice MVP et la couleur au shader, definition dans ressources  des locations pour les matrices
      glUniformMatrix4fv(m_resources.mvpLocationColorUniform, 1, GL_FALSE, &mvp[0][0]);
      glUniform3f(m_resources.colorLocationColorUniform, 0.3f, 0.8f, 0.3f); //couleure aleatoire , ca donne du vert
      
      // 5.dessiner le sol (les 2 triangles de m_groundDraw)
      m_groundDraw.draw();

    //TODO - ajouter les 4 cubes aux points cardinaux
    for (int i =0 ; i<4; i++) {
        // le model reset pour deplacer chq cubes.
        model = glm::mat4(1.0f);
        // translate les cubes a leur positions cardinale, regarder le tableau en haut
        model = glm::translate(model, cubePositions[i]);
        //affecter les view et projection sur la matrice
        mvp = proj * view * model;
        //affecter la location pour le cube ( en pair avec le draw)
        glUniformMatrix4fv(m_resources.mvpLocationColorUniform, 1, GL_FALSE, &mvp[0][0]);
        //metre la couleur noire pour les 4 cubes
        glUniform3f(m_resources.colorLocationColorUniform, 0.0f,0.0f,0.0f );
        //dessiner le cube
        m_cube.draw();
    }


    // Debut de code pour le dessin des groupes de tasses (et obtenir la position du singe)
    glm::vec3 monkeyPos = glm::vec3(0.0f);
    float monkeyHeading = 0.0f;
    for (int i = 0; i < 3; i++)
    {
        
        for (int j = 0; j < 4; j++)
        {
            // Mettez la matrice model finale de la tasse dans cette matrice
            // pour être en mesure d'avoir la position et orientation du singe
            glm::mat4 cupModelMat = glm::mat4(1.0f);
            if (i == 0 && j == 0)
            {
                monkeyPos = glm::vec3(cupModelMat[3].x, 1.3, cupModelMat[3].z);
                monkeyHeading = atan2(cupModelMat[2].x, cupModelMat[0].x);
            }
        }
    }    
    
    // Laissez ce code à la fin de la méthode
    if (m_cameraMode == 2)
    {
        m_cameraPosition = monkeyPos;
        m_cameraPosition.y = 3.8;
        m_cameraOrientation.y = monkeyHeading;
    }
}

void SceneAttraction::updateInput(Window& w, double dt)
{
    // Mouse input
    int x = 0, y = 0;
    if (m_isMouseMotionEnabled)
        w.getMouseMotion(x, y);
    const float MOUSE_SENSITIVITY = 0.1;
    float cameraMouvementX = y * MOUSE_SENSITIVITY;
    float cameraMouvementY = x * MOUSE_SENSITIVITY;;
    
    const float KEYBOARD_MOUSE_SENSITIVITY = 1.5f;
    if (w.getKeyHold(Window::Key::UP))
        cameraMouvementX -= KEYBOARD_MOUSE_SENSITIVITY;
    if (w.getKeyHold(Window::Key::DOWN))
        cameraMouvementX += KEYBOARD_MOUSE_SENSITIVITY;
    if (w.getKeyHold(Window::Key::LEFT))
        cameraMouvementY -= KEYBOARD_MOUSE_SENSITIVITY;
    if (w.getKeyHold(Window::Key::RIGHT))
        cameraMouvementY += KEYBOARD_MOUSE_SENSITIVITY;
    
    m_cameraOrientation.y -= cameraMouvementY * dt;
    m_cameraOrientation.x -= cameraMouvementX * dt;

    // Keyboard input
    glm::vec3 positionOffset = glm::vec3(0.0);
    const float SPEED = 10.f;
    if (w.getKeyHold(Window::Key::W))
        positionOffset.z -= SPEED;
    if (w.getKeyHold(Window::Key::S))
        positionOffset.z += SPEED;
    if (w.getKeyHold(Window::Key::A))
        positionOffset.x -= SPEED;
    if (w.getKeyHold(Window::Key::D))
        positionOffset.x += SPEED;
        
    if (w.getKeyHold(Window::Key::Q))
        positionOffset.y -= SPEED;
    if (w.getKeyHold(Window::Key::E))
        positionOffset.y += SPEED;

    positionOffset = glm::rotate(glm::mat4(1.0f), m_cameraOrientation.y, glm::vec3(0.0, 1.0, 0.0)) * glm::vec4(positionOffset, 1);
    m_cameraPosition += positionOffset * glm::vec3(dt);
}

glm::mat4 SceneAttraction::getCameraFirstPerson()
{
    // TODO
    // message discord annso.
    //CONTEXTE : les attributs de la classe m_cameraPostion et m_cameraOrientation stockent les positions enregistrer relle de la camera
    // nous voulons creer une matrice pour bind la camera a ces positions pour simuler l'effet de premiere personne. Normalement je suppsoe
    // que, a chaque frame nous reclaculons avec les entree du clavienr pour faire une matrice qui va deplacer la postiion de la scene pour 
    //correspondre avec la postion theoriqeu de la camera

    //1.commencer avec une matrice identite creer
    glm::mat4 firstPerson = glm::mat4(1.0f);

    //2.appliquer un deplacement de la camera chacuns des point de la camera :
    //exemple: nous avons precedemment deplacer la camera or nous voulons creer une matrice qui
    // va depalcer les points vers la position actuelle pour qu<on deplace vers la position que devrait etre la camera
    firstPerson = glm::translate(firstPerson, m_cameraPosition);

    //3. pivoter la matrice selon l<axe vertical,pour oreinter la camera
    glm::vec3 verticalOrientation = glm::vec3(0.0f,1.0f,0.0f);
    firstPerson = glm::rotate(firstPerson, m_cameraOrientation[1], verticalOrientation );

    //4. oreintation horizontale, orienter vers la camera
    glm::vec3 horizontalOrientation = glm::vec3(1.0f,0.0f,0.0f);
    firstPerson = glm::rotate(firstPerson, m_cameraOrientation[0], horizontalOrientation );

    //5.pour obtenir la matrice de vue relle il faut tout inverser transformation de la camera, affecter tous les points a ceci

    return glm::inverse(firstPerson);
}


glm::mat4 SceneAttraction::getCameraThirdPerson()
{
    // TODO
    return glm::mat4(1.0);
}

glm::mat4 SceneAttraction::getProjectionMatrix(Window& w)
{
    const float SCREEN_SIZE_ORTHO = 10.0f;
    float aspectRatio = static_cast<float>(w.getWidth()) / static_cast<float>(w.getHeight());
    glm::mat4 proj;
    if (m_isOrtho)
        proj = glm::ortho(-5.0f, 5.0f, -5.0f, 5.0f, 0.1f, 300.0f);
    else
        proj = glm::perspective( glm::radians(70.0f), aspectRatio, 0.1f, 300.0f );

    return proj;
}

#ifndef SCENE_ATTRACTION_H
#define SCENE_ATTRACTION_H

#include "scene.h"

#include <glm/glm.hpp>

#include "model.h"
#include "texture.h"

class SceneAttraction : public Scene
{
public:
    SceneAttraction(Resources& res, bool& isMouseMotionEnabled);
    ~SceneAttraction();

    virtual void run(Window& w, double dt);
    
private:
    void updateInput(Window& w, double dt);

    glm::mat4 getCameraFirstPerson();
    glm::mat4 getCameraThirdPerson();
    
    glm::mat4 getProjectionMatrix(Window& w);
    
private:
    const char* const CAMERA_MODE_NAMES[3] = {
        "First person",
        "Third person",
        "Monkey",
    };
    const int N_CAMERA_MODE_NAMES = sizeof(CAMERA_MODE_NAMES) / sizeof(CAMERA_MODE_NAMES[0]);

    bool& m_isMouseMotionEnabled;
    int m_cameraMode;
    bool m_isOrtho;

    glm::vec3 m_cameraPosition;
    glm::vec2 m_cameraOrientation;
    
    BufferObject m_groundBuffer;
    BufferObject m_groundIndicesBuffer;
    VertexArrayObject m_groundVao;
    DrawElementsCommand m_groundDraw;
    
    float m_largePlatformAngle;
    float m_smallPlatformAngle[3];
    float m_cupsAngles[3][4];    

    Model m_suzanne;    
    Model m_cup;
    Model m_cupPlate;
    Model m_smallPlatform;
    Model m_largePlatform;
    Model m_cube;
    
    Texture2D m_groundTexture;
    Texture2D m_suzanneTexture;
    Texture2D m_cupTextureAtlas;
    Texture2D m_smallPlatformTexture;
    Texture2D m_largePlatformTexture;
};

#endif // SCENE_ATTRACTION_H
